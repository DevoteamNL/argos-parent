#
# Copyright (C) 2019 - 2020 Rabobank Nederland
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

openapi: "3.0.0"
info:
  version: 1.0.0
  title: Argos Service
  license:
    name: Apache License 2.0
servers:
  - url: /api
security:
  - bearerAuth: []

paths:
  /supplychain:
    post:
      summary: create a supplychain
      operationId: createSupplyChain
      tags:
        - supplychain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupplyChain"
      responses:
        '201':
          description: created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: location where the created supplychain can be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplyChain"
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
    get:
      summary: get supply chain by path
      operationId: getSupplyChainByPath
      tags:
        - supplychain
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: path
          in: query
          style: simple
          explode: true
          required: true
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: the supply chain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplyChain"
        '404':
          description: not found
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}:
    get:
      summary: get a supplychain
      operationId: getSupplyChain
      tags:
        - supplychain
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the supply chain item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplyChain"
        '500':
          $ref: '#/components/responses/Error'
    put:
      summary: update supplychain by id
      operationId: updateSupplyChain
      tags:
        - supplychain
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupplyChain"
      responses:
        '200':
          description: updated supply chain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplyChain'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      summary: delete supply chain by id. The layout, approval configs and link objects are also deleted
      operationId: deleteSupplyChainById
      tags:
        - supplychain
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: supply chain deleted
        '500':
          $ref: '#/components/responses/Error'

  /supplychain/{supplyChainId}/account:
    get:
      summary: searches for service accounts and personal accounts
      operationId: searchAccounts
      security:
        - bearerAuth: []
      tags:
        - searchAccount
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: accountType
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/AccountType"
      responses:
        '200':
          description: array of AccountInfo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountInfo"
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/account/key:
    get:
      summary: searches on keys of service accounts and personal accounts
      operationId: searchKeysFromAccount
      security:
        - bearerAuth: []
      tags:
        - searchAccount
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
        - name: keyIds
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              minLength: 64
              maxLength: 64
              pattern: '^[0-9a-f]*$'

      responses:
        '200':
          description: array of AccountKeyInfo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountKeyInfo"
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/link:
    get:
      summary: find link
      operationId: findLink
      tags:
        - link
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
        - name: hash
          in: query
          description: hash of product or material
          required: false
          schema:
            type: string
      responses:
        '200':
          description: array of links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinkMetaBlock"
        '500':
          $ref: '#/components/responses/Error'
    post:
      summary: Create a link
      operationId: createLink
      tags:
        - link
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkMetaBlock"
      responses:
        '204':
          description: no content
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/layout:
    get:
      summary: get layout
      operationId: getLayout
      tags:
        - layout
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: layout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayoutMetaBlock"
        '500':
          $ref: '#/components/responses/Error'
        '404':
          description: no layout found
    post:
      summary: create or update a layout
      operationId: createOrUpdateLayout
      tags:
        - layout
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LayoutMetaBlock"
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayoutMetaBlock"
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: location where the created layout metablock can be found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/layout/validate:
    post:
      summary: validates a layout on data input and model consistency
      operationId: validateLayout
      tags:
        - layout
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Layout"
      responses:
        '204':
          description: layout is correct
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/layout/releaseconfig:
    get:
      summary: returns release configurations for a layout
      operationId: getReleaseConfiguration
      tags:
        - layout
      security:
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: release configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReleaseConfiguration"
        '500':
          $ref: '#/components/responses/Error'
    post:
      summary: create release configurations for a layout
      operationId: createReleaseConfiguration
      tags:
        - layout
      security:
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReleaseConfiguration"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReleaseConfiguration"
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'

  /supplychain/{supplyChainId}/layout/approvalconfig:
    get:
      summary: returns a list of approval configurations for a layout
      operationId: getApprovalConfigurations
      tags:
        - layout
      security:
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: array of approval configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApprovalConfiguration"
        '500':
          $ref: '#/components/responses/Error'
    post:
      summary: create approval configurations for a layout
      operationId: createApprovalConfigurations
      tags:
        - layout
      security:
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ApprovalConfiguration"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApprovalConfiguration"
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/layout/approvalconfig/me:
    get:
      summary: returns a list of approvals for the login user
      operationId: getApprovalsForAccount
      tags:
        - layout
      security:
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: array of approvals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApprovalConfiguration"
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/verification:
    post:
      summary: creates a verification run
      operationId: performVerification
      tags:
        - verification
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyCommand"
      responses:
        '200':
          description: VerificationResult
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
  /supplychain/{supplyChainId}/release:
    post:
      summary: releases a list of artifact sets these sets will be verified
      operationId: createRelease
      tags:
        - release
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - name: supplyChainId
          in: path
          description: supply chain id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReleaseArtifacts"
      responses:
        '200':
          description: VerificationResult
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseResult'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'

  /hierarchy:
    get:
      summary: get all root nodes
      operationId: getRootNodes
      tags:
        - hierarchy
      parameters:
        - name: HierarchyMode
          in: query
          schema:
            $ref: "#/components/schemas/HierarchyMode"
        - name: maxDepth
          in: query
          required: false
          description: positive integer specifying the maximum levels of descendants that are returned in a search. This parameter is ignored in case of HierarchyhMode ALL and NONE
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
      responses:
        '200':
          description: list of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TreeNode"
        '500':
          $ref: '#/components/responses/Error'

  /hierarchy/{referenceId}:
    get:
      summary: get a subtree
      operationId: getSubTree
      tags:
        - hierarchy
      security:
        - bearerAuth: []

      parameters:
        - name: HierarchyMode
          in: query
          schema:
            $ref: "#/components/schemas/HierarchyMode"
        - name: maxDepth
          in: query
          required: false
          description: positive integer specifying the maximum levels of descendants that are retured this parameter is ignored in case of HierarchyhMode ALL and NONE
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: referenceId
          in: path
          required: true
          description: this will be the root id of the returned sub tree
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TreeNode"
        '500':
          $ref: '#/components/responses/Error'
  /label:
    post:
      summary: create a new label
      operationId: createLabel
      tags:
        - hierarchy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
      responses:
        '201':
          description: created label
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: location where the created label can be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
  /label/{labelId}:
    get:
      summary: get label by id
      operationId: getLabelById
      tags:
        - hierarchy
      parameters:
        - name: labelId
          in: path
          description: label id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '500':
          $ref: '#/components/responses/Error'
    put:
      summary: update label by id
      operationId: updateLabelById
      tags:
        - hierarchy
      parameters:
        - name: labelId
          in: path
          description: label id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
      responses:
        '200':
          description: created label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      summary: delete label by id
      operationId: deleteLabelById
      tags:
        - hierarchy
      parameters:
        - name: labelId
          in: path
          description: label id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: label deleted
        '500':
          $ref: '#/components/responses/Error'
  /personalaccount/me/key:
    post:
      summary: creates a new active public and private key pair
      operationId: createKey
      tags:
        - personal account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyPair"
      responses:
        '204':
          description: no content
        '404':
          description: personal account not found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'

    get:
      summary: gets the currently active a key pair
      operationId: getKeyPair
      tags:
        - personal account
      responses:
        '200':
          description: Key pair
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyPair"
        '404':
          description: personal account not found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'

  /personalaccount/me:
    get:
      summary: returns the personal account profile of the authenticated personal account based on the bearer token
      operationId: getPersonalAccountOfAuthenticatedUser
      tags:
        - personal account
      responses:
        '200':
          description: Personal Account Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: personal account not found
        '500':
          $ref: '#/components/responses/Error'
  /personalaccount:
    get:
      summary: search
      operationId: searchPersonalAccounts
      tags:
        - personal account
      parameters:
        - name: roleName
          in: query
          required: false
          schema:
            type: string
        - name: localPermissionsLabelId
          in: query
          required: false
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: activeKeyIds
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              minLength: 64
              maxLength: 64
              pattern: '^[0-9a-f]*$'
        - name: inactiveKeyIds
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              minLength: 64
              maxLength: 64
              pattern: '^[0-9a-f]*$'
      responses:
        '200':
          description: list of personal accounts without roles property
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PersonalAccount"
  /personalaccount/{accountId}:
    get:
      summary: get personal account by id
      operationId: getPersonalAccountById
      tags:
        - personal account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
      responses:
        '200':
          description: personal account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalAccount"
        '500':
          $ref: '#/components/responses/Error'
  /personalaccount/{accountId}/key:
    get:
      summary: get active key by personal account id
      operationId: getPersonalAccountKeyById
      tags:
        - personal account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
      responses:
        '200':
          description: key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicKey"
        '404':
          description: no active key exists
        '500':
          $ref: '#/components/responses/Error'
  /personalaccount/{accountId}/role:
    put:
      summary: update personal account roles by id
      operationId: updatePersonalAccountRolesById
      tags:
        - personal account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: role names
              type: array
              items:
                type: string
      responses:
        '200':
          description: updated personal account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalAccount"
        '500':
          $ref: '#/components/responses/Error'
  /personalaccount/{accountId}/localpermission/{labelId}:
    get:
      summary: returns the local permissions of the personalaccount and label
      operationId: getLocalPermissionsForLabel
      tags:
        - personal account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
        - name: labelId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
      responses:
        '200':
          description: local permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalPermissions"
        '204':
          description: no local permissions
    put:
      summary: updates permissions of the personalaccount and label when the permissions list is empty the permissions are removed
      operationId: updateLocalPermissionsForLabel
      tags:
        - personal account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
        - name: labelId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: local permission
              type: array
              items:
                $ref: "#/components/schemas/Permission"
      responses:
        '200':
          description: local permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalPermissions"
        '204':
          description: local permissions removed

  /personalaccount/{accountId}/localpermission:
    get:
      summary: returns all the local permissions of the personalaccount
      operationId: getAllLocalPermissions
      tags:
        - personal account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
      responses:
        '200':
          description: all local permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocalPermissions"
        '500':
          $ref: '#/components/responses/Error'
  /serviceaccount:
    post:
      summary: create a new service account
      operationId: createServiceAccount
      tags:
        - service account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccount"
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccount"
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: location where the created service account can be found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
  /serviceaccount/me/activekey:
    get:
      summary: return the active key pair
      operationId: getServiceAccountKey
      security:
        - basicAuth: []
      tags:
        - service account
      responses:
        '200':
          description: active key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccountKeyPair"
        '404':
          description: no active key exists
        '500':
          $ref: '#/components/responses/Error'
  /serviceaccount/{serviceAccountId}:
    get:
      summary: find service account by id
      operationId: getServiceAccountById
      tags:
        - service account
      parameters:
        - name: serviceAccountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: service account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccount"
        '404':
          description: the service account is not found
        '500':
          $ref: '#/components/responses/Error'
    put:
      summary: update service account by id
      operationId: updateServiceAccountById
      tags:
        - service account
      parameters:
        - name: serviceAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccount"
      responses:
        '200':
          description: updated service account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccount"
        '404':
          description: the service account is not found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      summary: deletes a service account
      operationId: deleteServiceAccount
      tags:
        - service account
      parameters:
        - name: serviceAccountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: deleted service account
        '404':
          description: the service account is not found
        '500':
          $ref: '#/components/responses/Error'
  /serviceaccount/{serviceAccountId}/key:
    post:
      summary: create a new active key the old key will be made inactive
      operationId: createServiceAccountKeyById
      tags:
        - service account
      parameters:
        - name: serviceAccountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccountKeyPair"
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccountKeyPair"
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: location where the created key can be found
        '404':
          description: the service account is not found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/Error'
    get:
      summary: return the active key pair
      operationId: getServiceAccountKeyById
      tags:
        - service account
      parameters:
        - name: serviceAccountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccountKeyPair"
        '404':
          description: no active key exists
        '500':
          $ref: '#/components/responses/Error'
  /permissions/global/role:
    get:
      summary: gets all roles
      operationId: getRoles
      tags:
        - permissions
      responses:
        '200':
          description: list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        '401':
          $ref: '#/components/responses/Unauthorized'

        '500':
          $ref: '#/components/responses/Error'
  /permissions:
    get:
      summary: gets all permissions
      operationId: getPermissions
      tags:
        - permissions
      responses:
        '200':
          description: list of all permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
  responses:
    ValidationError:
      description: validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
    Error:
      description: server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: unauthorized
  schemas:
    VerifyCommand:
      type: object
      required:
        - expectedProducts
      properties:
        expectedProducts:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Artifact"

    VerificationResult:
      type: object
      required:
        - runIsValid
      properties:
        runIsValid:
          type: boolean

    LinkMetaBlock:
      type: object
      required:
        - signature
        - link
      properties:
        signature:
          $ref: "#/components/schemas/Signature"
        link:
          $ref: "#/components/schemas/Link"
    Signature:
      type: object
      required:
        - keyId
        - signature
        - hashAlgorithm
        - keyAlgorithm
      properties:
        keyId:
          $ref: '#/components/schemas/KeyId'
        signature:
          type: string
          minLength: 80
          maxLength: 1024
          pattern: '^[0-9a-f]*$'
        hashAlgorithm:
          $ref: '#/components/schemas/HashAlgorithm'
        keyAlgorithm:
          $ref: '#/components/schemas/KeyAlgorithm'
    Link:
      type: object
      required:
        - runId
        - layoutSegmentName
        - stepName
        - materials
        - products
      properties:
        runId:
          type: string
        stepName:
          type: string
          minLength: 1
          pattern: '^([A-Za-z0-9_-]*)?$'
        layoutSegmentName:
          type: string
          minLength: 1
          pattern: '^([A-Za-z0-9_-]*)?$'
        materials:
          type: array
          items:
            $ref: "#/components/schemas/Artifact"
        products:
          type: array
          items:
            $ref: "#/components/schemas/Artifact"
    Artifact:
      type: object
      required:
        - uri
        - hash
      properties:
        uri:
          type: string
          maxLength: 1024
          pattern: '^(?!.*\\).*$'
        hash:
          type: string
          minLength: 64
          maxLength: 64
          pattern: '^[0-9a-f]*$'
    PublicKey:
      type: object
      required:
        - keyId
        - publicKey
      properties:
        keyId:
          $ref: '#/components/schemas/KeyId'
        publicKey:
          type: string
          format: byte
    KeyPair:
      type: object
      required:
        - keyId
        - publicKey
        - encryptedPrivateKey
      properties:
        keyId:
          $ref: '#/components/schemas/KeyId'
        publicKey:
          type: string
          format: byte
        encryptedPrivateKey:
          type: string
          format: byte
    ServiceAccountKeyPair:
      type: object
      required:
        - keyId
        - publicKey
        - encryptedPrivateKey
        - hashedKeyPassphrase
      properties:
        keyId:
          $ref: '#/components/schemas/KeyId'
        publicKey:
          type: string
          format: byte
        encryptedPrivateKey:
          type: string
          format: byte
        hashedKeyPassphrase:
          type: string
          writeOnly: true
          description: used for authentication of a service account via http basic authentication
    SupplyChain:
      type: object
      required:
        - name
        - parentLabelId
      properties:
        id:
          type: string
          maxLength: 36
          readOnly: true
        name:
          type: string
          maxLength: 256
          pattern: '^([a-z]{1}[a-z0-9-]*)?$'
        parentLabelId:
          type: string
          minLength: 36
          maxLength: 36
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
    LayoutMetaBlock:
      type: object
      required:
        - signatures
        - layout
      properties:
        signatures:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Signature"
        layout:
          $ref: "#/components/schemas/Layout"
    Layout:
      type: object
      required:
        - keys
        - authorizedKeyIds
        - expectedEndProducts
        - layoutSegments
      properties:
        keys:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PublicKey'
        authorizedKeyIds:
          type: array
          minItems: 1
          items:
            type: string
            description: key id is a hash of the public key
            minLength: 64
            maxLength: 64
            pattern: '^[0-9a-f]*$'
        expectedEndProducts:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/MatchRule'
        layoutSegments:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/LayoutSegment"
    LayoutSegment:
      type: object
      required:
        - name
        - steps
      properties:
        name:
          type: string
          minLength: 1
          pattern: '^([A-Za-z0-9_-]*)?$'
        steps:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Step"
    MatchRule:
      type: object
      required:
        - pattern
        - destinationType
        - destinationSegmentName
        - destinationStepName
      properties:
        pattern:
          type: string
        sourcePathPrefix:
          type: string
          maxLength: 1024
          pattern: '^(?!.*\\).*$'
        destinationType:
          type: string
          enum:
            - PRODUCTS
            - MATERIALS
        destinationPathPrefix:
          type: string
          maxLength: 1024
          pattern: '^(?!.*\\).*$'
        destinationSegmentName:
          type: string
        destinationStepName:
          type: string
    Step:
      type: object
      required:
        - name
        - requiredNumberOfLinks
        - authorizedKeyIds
        - expectedMaterials
        - expectedProducts
      properties:
        name:
          type: string
          minLength: 1
          pattern: '^([A-Za-z0-9_-]*)?$'
        authorizedKeyIds:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/KeyId'
        requiredNumberOfLinks:
          type: integer
          format: int32
          minimum: 1
        expectedMaterials:
          type: array
          items:
            $ref: "#/components/schemas/Rule"
        expectedProducts:
          type: array
          items:
            $ref: "#/components/schemas/Rule"
    KeyId:
      type: string
      description: key id is a hash of the public key
      minLength: 64
      maxLength: 64
      pattern: '^[0-9a-f]*$'
    KeyAlgorithm:
      enum:
        - EC
    HashAlgorithm:
      enum:
        - SHA256
        - SHA384
        - SHA512
    Rule:
      type: object
      required:
        - ruleType
        - pattern
      properties:
        ruleType:
          type: string
          enum:
            - ALLOW
            - CREATE
            - CREATE_OR_MODIFY
            - DELETE
            - DISALLOW
            - MATCH
            - MODIFY
            - REQUIRE
        pattern:
          type: string
        sourcePathPrefix:
          type: string
        destinationPathPrefix:
          type: string
        destinationSegmentName:
          type: string
        destinationType:
          type: string
          enum:
            - PRODUCTS
            - MATERIALS
        destinationStepName:
          type: string
    Label:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          minLength: 1
          pattern: '^([a-z]{1}[a-z0-9_]*)?$'
        parentLabelId:
          type: string
          minLength: 36
          maxLength: 36
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
    TreeNode:
      type: object
      required:
        - name
        - type
        - referenceId
        - children
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - LABEL
            - SUPPLY_CHAIN
            - SERVICE_ACCOUNT
        referenceId:
          type: string
        hasChildren:
          type: boolean
        children:
          type: array
          items:
            $ref: "#/components/schemas/TreeNode"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
    HierarchyMode:
      type: string
      enum:
        - ALL
        - NONE
        - MAX_DEPTH
      default: NONE
      description: The mode of the returned descendants in a tree node hierarchy. ALL returns all descendants, NONE returns nodes without any descendants , MAX_DEPTH returns descendants up to a specified depth
    PersonalAccount:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    Profile:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    ServiceAccount:
      type: object
      required:
        - name
        - parentLabelId
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        parentLabelId:
          type: string
          minLength: 36
          maxLength: 36
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
    Role:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          readOnly: true
          maxLength: 36
        name:
          type: string
          minLength: 1
          pattern: '^([a-z]{1}[a-z0-9_]*)?$'
        permissions:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Permission"
    Permission:
      type: string
      enum:
        - READ
        - TREE_EDIT
        - LOCAL_PERMISSION_EDIT
        - ASSIGN_ROLE
        - LINK_ADD
        - LAYOUT_ADD
        - VERIFY
        - RELEASE
        - PERSONAL_ACCOUNT_READ
        - SERVICE_ACCOUNT_EDIT
    LocalPermissions:
      type: object
      required:
        - labelId
        - permissions
      properties:
        labelId:
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}?$'
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
    ReleaseConfiguration:
      type: object
      required:
        - artifactCollectorSpecifications
      properties:
        artifactCollectorSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/ArtifactCollectorSpecification"
          minItems: 1
    ApprovalConfiguration:
      type: object
      required:
        - stepName
        - segmentName
        - artifactCollectorSpecifications
      properties:
        stepName:
          type: string
          pattern: '^([A-Za-z0-9_-]*)?$'
        segmentName:
          type: string
          pattern: '^([A-Za-z0-9_-]*)?$'
        artifactCollectorSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/ArtifactCollectorSpecification"
          minItems: 1
    ArtifactCollectorSpecification:
      type: object
      required:
        - name
        - type
        - uri
        - context
      properties:
        name:
          type: string
          pattern: '^([A-Za-z0-9_-]*)?$'
        type:
          type: string
          enum:
            - XLDEPLOY
            - GIT
        uri:
          description: base url of the artifact collector server
          type: string
          format: uri
        context:
          description: additional key value pair attributes that can very per collector type for XLDEPLOY the key is 'applicationName'
          type: object
          additionalProperties:
            type: string
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ValidationError:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ValidationMessage"
    ValidationMessage:
      type: object
      required:
        - message
        - type
      properties:
        field:
          type: string
        type:
          type: string
          enum:
            - DATA_INPUT
            - MODEL_CONSISTENCY
        message:
          type: string

    AccountType:
      type: string
      enum:
        - SERVICE_ACCOUNT
        - PERSONAL_ACCOUNT
    AccountKeyInfo:
      type: object
      required:
        - keyId
        - keyStatus
      properties:
        accountId:
          type: string
        name:
          type: string
        path:
          type: string
        accountType:
          $ref: '#/components/schemas/AccountType'
        keyId:
          $ref: '#/components/schemas/KeyId'
        keyStatus:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - DELETED
    AccountInfo:
      type: object
      properties:
        accountId:
          type: string
        name:
          type: string
        path:
          type: string
        accountType:
          $ref: '#/components/schemas/AccountType'
    ReleaseArtifacts:
      type: object
      properties:
        releaseArtifacts:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 1
            items:
              $ref: '#/components/schemas/Artifact'
    ReleaseResult:
      type: object
      properties:
        releaseIsValid:
          type: boolean
        releaseDossierMetaData:
          $ref: '#/components/schemas/ReleaseDossierMetaData'

    ReleaseDossierMetaData:
      type: object
      properties:
        documentId:
          type: string
        releaseDate:
          type: string
          format: date-time
        supplyChainPath:
          type: string
        releaseArtifacts:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 1
            items:
              type: string


